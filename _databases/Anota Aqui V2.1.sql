-- MySQL Script generated by MySQL Workbench
-- Sat Fev 13 16:38:11 2021
-- Model: New Model    Version: 1.2
-- MySQL Workbench Forward Engineering

-- -----------------------------------------------------
-- Schema anota_aqui_v1.2
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS anota_aqui DEFAULT CHARACTER SET utf8;
USE anota_aqui;

-- -----------------------------------------------------
-- Table Usuario
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS Usuario (
  id_usuario INT PRIMARY KEY AUTO_INCREMENT,
  nm_usuario VARCHAR(80) NOT NULL,
  nm_email VARCHAR(50) UNIQUE NOT NULL,
  nm_senha VARCHAR(80) NOT NULL,
  nm_caminho_foto VARCHAR(200));


-- -----------------------------------------------------
-- Table Administrador
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS Administrador (
  id_administrador INT PRIMARY KEY AUTO_INCREMENT,
  fk_id_usuario INT NOT NULL,
  CONSTRAINT fk_Administrador_Usuario
    FOREIGN KEY (fk_id_usuario)
    REFERENCES Usuario (id_usuario));


-- -----------------------------------------------------
-- Table Ranking
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS Ranking (
  id_ranking INT PRIMARY KEY AUTO_INCREMENT,
  nm_ranking VARCHAR(20) NOT NULL,
  dt_criacao DATETIME NOT NULL,
  ic_privacidade TINYINT NOT NULL,
  ie_modalidade INT NOT NULL,
  fk_id_administrador INT NOT NULL,
  CONSTRAINT fk_Ranking_Administrador
    FOREIGN KEY (fk_id_administrador)
    REFERENCES Administrador (id_administrador));


-- -----------------------------------------------------
-- Table Jogadores_Ranking
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS Jogadores_Ranking (
  id_jogador INT PRIMARY KEY AUTO_INCREMENT,
  nm_jogador VARCHAR(40) NOT NULL,
  qt_ponto INT NULL,
  fk_id_ranking INT NOT NULL,
  CONSTRAINT fk_Jogadores_Ranking_Ranking
    FOREIGN KEY (fk_id_ranking)
    REFERENCES Ranking (id_ranking));


-- -----------------------------------------------------
-- Table Campeonato
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS Campeonato (
  id_campeonato INT PRIMARY KEY NOT NULL,
  nm_campeonato VARCHAR(50) NULL,
  dt_criacao DATETIME NULL,
  ic_privacidade TINYINT NULL,
  ie_modalidade INT NULL,
  fk_id_administrador INT NOT NULL,
  CONSTRAINT fk_Campeonato_Administrador
    FOREIGN KEY (fk_id_administrador)
    REFERENCES Administrador (id_administrador));


-- -----------------------------------------------------
-- Table Partida
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS Partida (
  id_partida INT PRIMARY KEY NOT NULL);
 
 
 -- -----------------------------------------------------
-- Table Times
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS Times (
  id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
  nome VARCHAR(50) null
 fk_id_ranking_campeonato,
  CONSTRAINT fk_id_ranking_campeonato
    FOREIGN KEY (fk_id_ranking_campeonato)
    REFERENCES ranking_campeonato (id));


-- -----------------------------------------------------
-- Table Times
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS Ranking_Campeonato (
  id INT PRIMARY KEY AUTO_INCREMENT,
  pontos INT DEFAULT 0 NULL,
  vitorias INT DEFAULT 0 NULL,
  empates INT DEFAULT 0 NULL,
  derrotas INT DEFAULT 0 NULL,
  gols_feitos INT DEFAULT 0 NULL,
  gols_sofridos INT DEFAULT 0 NULL,
  saldo_gols INT DEFAULT 0 NULL, 
  fk_id_campeonato INT NOT NULL,
  fk_id_partida INT DEFAULT NULL,
  CONSTRAINT fk_Times_Campeonato
    FOREIGN KEY (fk_id_campeonato)
    REFERENCES Campeonato (id_campeonato),
  CONSTRAINT fk_Times_Partida
    FOREIGN KEY (fk_id_partida)
    REFERENCES Partida (id_partida));


-- -----------------------------------------------------
-- Table Jogadores_Times
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS Jogadores_Times (
  id_jogador INT PRIMARY KEY AUTO_INCREMENT,
  nm_jogador VARCHAR(80) NULL,
  fk_id_time INT NOT NULL,
  CONSTRAINT fk_Jogadores_Times_Times
    FOREIGN KEY (fk_id_time)
    REFERENCES Times (id));


-- -----------------------------------------------------
-- Table Moderador
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS Moderador (
  id INT PRIMARY KEY AUTO_INCREMENT,
  fk_id_usuario INT NOT NULL,
  CONSTRAINT fk_Moderador_Usuario
    FOREIGN KEY (fk_id_usuario)
    REFERENCES Usuario (id_usuario));


-- -----------------------------------------------------
-- Table Conquistas
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS Conquistas (
  id_conquistas INT PRIMARY key AUTO_INCREMENT,
  fk_id_usuario INT NOT NULL,
  ic_artilharia_pesada TINYINT NULL,
  ic_fa_n1 TINYINT NULL,
  ic_popular TINYINT NULL,
  ic_esportista TINYINT NULL,
  ic_rei_futebol TINYINT NULL,
  ic_rei_basquete TINYINT NULL,
  CONSTRAINT fk_Conquistas_Usuario
    FOREIGN KEY (fk_id_usuario)
    REFERENCES Usuario (id_usuario));


-- -----------------------------------------------------
-- Table Ranking_Moderador
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS Ranking_Moderador (
  id INT PRIMARY KEY auto_increment,
  Ranking_id_ranking INT NOT NULL,
  Moderador_id INT NOT NULL,
  CONSTRAINT fk_Ranking_has_Moderador_Ranking
    FOREIGN KEY (Ranking_id_ranking)
    REFERENCES Ranking (id_ranking),
  CONSTRAINT fk_Ranking_has_Moderador_Moderador
    FOREIGN KEY (Moderador_id)
    REFERENCES Moderador (id));


-- -----------------------------------------------------
-- Table Pontos_Partida
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS Pontos_Partida (
  id_Pontos_Partida INT PRIMARY KEY AUTO_INCREMENT,
  gols INT NULL,
  cartoes_amarelos INT NULL,
  cartoes_vermelhos INT NULL,
  fk_id_partida INT NOT NULL,
  fk_id_jogador INT NOT NULL,
  CONSTRAINT fk_Times_Partida_Partida
    FOREIGN KEY (fk_id_partida)
    REFERENCES Partida (id_partida),
  CONSTRAINT fk_Pontos_Partida_Jogadores_Times
    FOREIGN KEY (fk_id_jogador)
    REFERENCES Jogadores_Times (id_jogador));
   
   
-- ---------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Complementares
-- ---------------------------------------------------------------------------------------------------------------------------------------------------------------

-- -----------------------------------------------------
-- Consultar Ranking
-- -----------------------------------------------------
    -- Criar uma function que vai receber o id do ranking para passar o valor para a view
    create function getJogadoresRanking() returns INTEGER DETERMINISTIC NO SQL return @getJogadoresRanking;
    -- criar a view recebendo o parametro da function
    create or replace view vw_ranking as
    select row_number() over (order by qt_ponto desc) as colocacao, id_jogador, nm_jogador, qt_ponto, fk_id_ranking from Jogadores_Ranking where fk_id_ranking = getJogadoresRanking();
    
   
   
   
